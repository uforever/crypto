use crate::bytes::Bytes;
use crate::enums::BlockSize;

mod sm4_decrypt;
mod sm4_encrypt;

pub use sm4_decrypt::Sm4Decrypt;
pub use sm4_encrypt::Sm4Encrypt;

const ROUNDS: usize = 32;
const BLOCK_SIZE: BlockSize = BlockSize::Bytes16;

const S_BOX: [u8; 256] = [
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48,
];

const CK: [u32; 32] = [
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279,
];

const FK: [u32; 4] = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc];

// 线性变换 L
fn linear_transform(x: u32) -> u32 {
    x ^ (x.rotate_left(2) ^ x.rotate_left(10) ^ x.rotate_left(18) ^ x.rotate_left(24))
}

// 线性变换 L'
fn l_prime(x: u32) -> u32 {
    x ^ (x.rotate_left(13) ^ x.rotate_left(23))
}

// 非线性变换 替换函数
fn s_box(x: u32) -> u32 {
    let mut result = 0;
    for i in 0..4 {
        let byte = ((x >> (8 * i)) & 0xff) as usize;
        result |= (S_BOX[byte] as u32) << (8 * i);
    }
    result
}

// 密钥调度算法
fn key_schedule(key: &Bytes) -> Vec<u32> {
    // 轮密钥
    let mut round_keys = Vec::with_capacity(ROUNDS);

    // 初始密钥
    let mut original_key = key.to_vec();
    // 严格来说密钥长度必须为16字节
    // 但我们这里手动将其补充到16字节
    let length = original_key.len();
    if length < 16 {
        original_key.extend(vec![0; 16 - length]);
    }

    // 将密钥分为4个32位的整数
    let mut k = [
        u32::from_be_bytes([
            original_key[0],
            original_key[1],
            original_key[2],
            original_key[3],
        ]),
        u32::from_be_bytes([
            original_key[4],
            original_key[5],
            original_key[6],
            original_key[7],
        ]),
        u32::from_be_bytes([
            original_key[8],
            original_key[9],
            original_key[10],
            original_key[11],
        ]),
        u32::from_be_bytes([
            original_key[12],
            original_key[13],
            original_key[14],
            original_key[15],
        ]),
    ];

    k[0] ^= FK[0];
    k[1] ^= FK[1];
    k[2] ^= FK[2];
    k[3] ^= FK[3];

    for ck in CK.iter().take(ROUNDS) {
        let rki = k[0] ^ l_prime(s_box(k[1] ^ k[2] ^ k[3] ^ ck));
        round_keys.push(rki);
        k[0] = k[1];
        k[1] = k[2];
        k[2] = k[3];
        k[3] = rki;
    }

    round_keys
}

fn block_crypt(round_keys: &[u32]) -> impl Fn(&[u8]) -> Bytes + '_ {
    move |block| {
        let mut x = [
            u32::from_be_bytes([block[0], block[1], block[2], block[3]]),
            u32::from_be_bytes([block[4], block[5], block[6], block[7]]),
            u32::from_be_bytes([block[8], block[9], block[10], block[11]]),
            u32::from_be_bytes([block[12], block[13], block[14], block[15]]),
        ];
        // 32轮迭代
        for round_key in round_keys.iter().take(ROUNDS) {
            let temp = x[0] ^ linear_transform(s_box(x[1] ^ x[2] ^ x[3] ^ round_key));
            x[0] = x[1];
            x[1] = x[2];
            x[2] = x[3];
            x[3] = temp;
        }
        // 1次反序变换
        Bytes::new(
            [
                x[3].to_be_bytes(),
                x[2].to_be_bytes(),
                x[1].to_be_bytes(),
                x[0].to_be_bytes(),
            ]
            .concat(),
        )
    }
}
